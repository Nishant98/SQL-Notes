https://www.sql-practice.com/

EASY LEVEL


Q) Show first name, last name, and gender of patients who's gender is 'M'

SELECT first_name, last_name, gender FROM patients where gender = 'M';

Q) Show first name and last name of patients who does not have allergies. (null)

SELECT first_name, last_name FROM patients where allergies IS null;

Q) Show first name of patients that start with the letter 'C'

SELECT first_name FROM patients where first_name LIKE 'C%';

Q) Show first name and last name of patients that weight within the range of 100 to 120 (inclusive)

SELECT first_name, last_name FROM patients where weight between 100 and 120;

Q) Update the patients table for the allergies column. If the patient's allergies is null then replace it with 'NKA'

UPDATE patients 
SET allergies = 'NKA'
WHERE allergies is null;

Q) Show first name and last name concatinated into one column to show their full name.

SELECT CONCAT(first_name,' ', last_name) AS full_name
FROM patients;

Q) Show first name, last name, and the full province name of each patient.

SELECT first_name, last_name, province_name
FROM patients
INNER JOIN
province_names
ON patients.province_id = province_names.province_id;

Q) Show how many patients have a birth_date with 2010 as the birth year.

SELECT COUNT(*) from patients where YEAR(birth_date) = 2010;

Q) Show the first_name, last_name, and height of the patient with the greatest height.

select first_name, last_name, height from patients where height IN (select MAX(height) from patients)

Q) Show all columns for patients who have one of the following patient_ids:
1,45,534,879,1000

select * from patients where patient_id IN (1,45,534,879,1000)

Q) Show the total number of admissions

SELECT COUNT(*) FROM admissions;

Q) Show all the columns from admissions where the patient was admitted and discharged on the same day.

SELECT * FROM admissions where admission_date = discharge_date;

Q) Show the total number of admissions for patient_id 579.

SELECT patient_id, COUNT(*) FROM admissions where patient_id = 579;

Q) Based on the cities that our patients live in, show unique cities that are in province_id 'NS'?

SELECT DISTINCT(city) FROM patients where province_id = 'NS';

Q) Write a query to find the first_name, last name and birth date of patients who have height more than 160 and weight more than 70

SELECT first_name, last_name, birth_date FROM patients where height > 160 and weight > 70;

Q) Write a query to find list of patients first_name, last_name, and allergies from Hamilton where allergies are not null

SELECT first_name, last_name, allergies FROM patients where allergies is not null and city = 'Hamilton';

Q) Based on cities where our patient lives in, write a query to display the list of unique city starting with a vowel (a, e, i, o, u). Show the result order in ascending by city.

SELECT DISTINCT(city) FROM patients where city LIKE 'a%' OR city LIKE 'e%' OR city LIKE 'i%' OR city LIKE 'o%' OR city LIKE 'u%' order by city ASC;


MEDIUM LEVEL

Q) Show unique birth years from patients and order them by ascending.
select distinct(year(birth_date)) as date from patients order by date asc;

Q) Show unique first names from the patients table which only occurs once in the list.

For example, if two or more people are named 'John' in the first_name column then don't include their name in the output list. If only 1 person is named 'Leo' then include them in the output.

select first_name from patients
group by first_name
having COUNT(*) = 1;

Q) Show patient_id and first_name from patients where their first_name start and ends with 's' and is at least 6 characters long.

select patient_id, first_name from patients
where first_name like 's____%s';

Q) Show patient_id, first_name, last_name from patients whos diagnosis is 'Dementia'.

Primary diagnosis is stored in the admissions table.

select patients.patient_id, first_name, last_name from patients
INNER JOIN
admissions
ON patients.patient_id = admissions.patient_id AND diagnosis = 'Dementia';

Q) Display every patient's first_name.
Order the list by the length of each name and then by alphbetically

select first_name from patients
order by LEN(first_name) asc, first_name asc;

Q) Show the total amount of male patients and the total amount of female patients in the patients table.
Display the two results in the same row.

select
SUM(case gender
	WHEN 'M' THEN 1
    ELSE 0
END) AS male,
SUM(case gender
	WHEN 'F' THEN 1
    ELSE 0
END) AS female
from patients;

Q) Show first and last name, allergies from patients which have allergies to either 'Penicillin' or 'Morphine'. Show results ordered ascending by allergies then by first_name then by last_name.

select first_name, last_name, allergies from patients where allergies = 'Penicillin' OR allergies = 'Morphine' order by allergies, first_name, last_name;

Q) Show patient_id, diagnosis from admissions. Find patients admitted multiple times for the same diagnosis.

SELECT patient_id, diagnosis FROM admissions group by patient_id, diagnosis having COUNT(*) > 1;
select * from admissions where diagnosis = 'Pregnancy';

Q) Show the city and the total number of patients in the city.
Order from most to least patients and then by city name ascending.

SELECT city, COUNT(patient_id) AS num_patients FROM patients group by city order by num_patients DESC, city ASc;

Q) Show first name, last name and role of every person that is either patient or doctor.
The roles are either "Patient" or "Doctor"

select first_name, last_name, 'Patient' as role from patients 
union ALL
select first_name, last_name, 'Doctor' as role from doctors;

Q) Show all allergies ordered by popularity. Remove NULL values from query.

select allergies, count(allergies) as total_diagnosis from patients where allergies is not null group by allergies order by total_diagnosis desc;

Q) Show all patient's first_name, last_name, and birth_date who were born in the 1970s decade. Sort the list starting from the earliest birth_date.


select first_name, last_name, birth_date from patients where year(birth_date) between 1970 and 1979 order by birth_date asc

Q) We want to display each patient's full name in a single column. Their last_name in all upper letters must appear first, then first_name in all lower case letters. Separate the last_name and first_name with a comma. Order the list by the first_name in decending order
EX: SMITH,jane

select concat(upper(last_name), ',', LOWER(first_name)) as new_name_format from patients order by first_name desc;

Q) Show the province_id(s), sum of height; where the total sum of its patient's height is greater than or equal to 7,000. 

select province_id, SUM(height) as sum_height from patients group by province_id having sum_height >= 7000;

Q) Show the difference between the largest weight and smallest weight for patients with the last name 'Maroni'

select MAX(weight) - min(weight) as weight_delta from patients where last_name = 'Maroni';

Q) Show all of the days of the month (1-31) and how many admission_dates occurred on that day. Sort by the day with most admissions to least admissions.

select DAY(admission_date) as day_number, count(*) AS number_of_admissions from admissions group by day_number order by number_of_admissions desc

Q) Show all columns for patient_id 542's most recent admission_date.

select * from admissions where patient_id = '542' order by admission_date desc LImit 1;

SELECT *
FROM admissions
WHERE patient_id = 542
GROUP BY patient_id
HAVING
  admission_date = MAX(admission_date);

Q) Show patient_id, attending_doctor_id, and diagnosis for admissions that match one of the two criteria:
1. patient_id is an odd number and attending_doctor_id is either 1, 5, or 19.
2. attending_doctor_id contains a 2 and the length of patient_id is 3 characters.

select patient_id, attending_doctor_id, diagnosis from admissions
where 
(patient_id%2 != 0 AND attending_doctor_id IN (1,5,19))
OR 
(attending_doctor_id like '%2%' AND LEN(patient_id) = 3);

Q) Show first_name, last_name, and the total number of admissions attended for each doctor.

Every admission has been attended by a doctor.

select first_name, last_name, count(patient_id) from admissions
Inner join doctors
on admissions.attending_doctor_id = doctors.doctor_id
group by attending_doctor_id;


SELECT
  first_name,
  last_name,
  count(*)
from
  doctors p,
  admissions a
where
  a.attending_doctor_id = p.doctor_id
group by p.doctor_id;

Q) For each physicain, display their id, full name, and the first and last admission date they attended.

select doctor_id, concat(first_name, ' ', last_name) as full_name, MIn(admission_date), max(admission_date) from admissions
inner join doctors
on admissions.attending_doctor_id = doctors.doctor_id
group by attending_doctor_id;

Q) Display the total amount of patients for each province. Order by descending. 

select province_name, COUNT(patient_id) AS patient_count from patients
INNer join province_names
on patients.province_id = province_names.province_id
group by province_name
order by patient_count DESC;

Q) For every admission, display the patient's full name, their admission diagnosis, and their doctor's full name who diagnosed their problem.

select CONCAT(patients.first_name, ' ', patients.last_name) as full_name, diagnosis, CONCAT(doctors.first_name, ' ', doctors.last_name) 
from patients
INNER JOIN admissions
ON patients.patient_id = admissions.patient_id
inner join doctors
on admissions.attending_doctor_id = doctors.doctor_id;

Q) display the number of duplicate patients based on their first_name and last_name.


select first_name, last_name, count(*) as num_of_duplicates from patients
group by first_name, last_name
having num_of_duplicates > 1
order by num_of_duplicates desc;

HARD LEVEL

Q) Show all of the patients grouped into weight groups.
Show the total amount of patients in each weight group.
Order the list by the weight group decending.

For example, if they weight 100 to 109 they are placed in the 100 weight group, 110-119 = 110 weight group, etc.

SELECT
  COUNT(*) AS patients_in_group,
  FLOOR(weight / 10) * 10 AS weight_group
FROM patients
GROUP BY weight_group
ORDER BY weight_group DESC;


Q) Show the percent of patients that have 'M' as their gender. Round the answer to the nearest hundreth number and in percent form.

SELECT CONCAT(
    ROUND(
      (
        SELECT COUNT(*)
        FROM patients
        WHERE gender = 'M'
      ) / CAST(COUNT(*) as float),
      4
    ) * 100,
    '%'
  ) as percent_of_male_patients
FROM patients;

SELECT
  round(100 * avg(gender = 'M'), 2) || '%' AS percent_of_male_patients
FROM
  patients;

SELECT
  round(100 * avg(gender = 'M'), 2) || '%' AS percent_of_male_patients
FROM
  patients;

 
Q) Show patient_id, weight, height, isObese from the patients table.

Display isObese as a boolean 0 or 1.

Obese is defined as weight(kg)/(height(m)2) >= 30.

weight is in units kg.

height is in units cm.

select patient_id, weight, height,
case
WHEN (weight/POWER(height*0.01, 2)) >= 30 THEN 1
ELSE 0
END AS isObese
FROM patients;

Q) Show patient_id, first_name, last_name, and attending doctor's specialty.
Show only the patients who has a diagnosis as 'Epilepsy' and the doctor's first name is 'Lisa'

Check patients, admissions, and doctors tables for required information.

select patients.patient_id, patients.first_name, patients.last_name, specialty
from patients
INNER JOIN admissions
ON patients.patient_id = admissions.patient_id
INNER join doctors
ON admissions.attending_doctor_id = doctors.doctor_id
where diagnosis = 'Epilepsy' And doctors.first_name = 'Lisa';

Q) All patients who have gone through admissions, can see their medical documents on our site. Those patients are given a temporary password after their first admission. Show the patient_id and temp_password.

The password must be the following, in order:
1. patient_id
2. the numerical length of patient's last_name
3. year of patient's birth_date

select patients.patient_id, concat(patients.patient_id, LEN(last_name), YEAR(birth_date)) from patients
INNER JOIN admissions
ON patients.patient_id = admissions.patient_id
group by patients.patient_id;

select
  distinct p.patient_id,
  p.patient_id || floor(len(last_name)) || floor(year(birth_date)) as temp_password
from patients p
  join admissions a on p.patient_id = a.patient_id

SELECT
  DISTINCT P.patient_id,
  CONCAT(
    P.patient_id,
    LEN(last_name),
    YEAR(birth_date)
  ) AS temp_password
FROM patients P
  JOIN admissions A ON A.patient_id = P.patient_id

Q) We are looking for a specific patient. Pull all columns for the patient who matches the following criteria:
- First_name contains an 'r' after the first two letters.
- Identifies their gender as 'F'
- Born in February, May, or December
- Their weight would be between 60kg and 80kg
- Their patient_id is an odd number
- They are from the city 'Kingston'

select * from patients 
where first_name like '__r%'
and gender = 'F'
AND month(birth_date) IN (2, 5, 12)
and weight between 60 and 80
and city = 'Kingston'
AND patient_id % 2 != 0;

Q) Show the provinces that has more patients identified as 'M' than 'F'. Must only show full province_name

SELECT pr.province_name
FROM patients AS pa
  JOIN province_names AS pr ON pa.province_id = pr.province_id
GROUP BY pr.province_name
HAVING
  COUNT( CASE WHEN gender = 'M' THEN 1 END) > COUNT( CASE WHEN gender = 'F' THEN 1 END);

SELECT province_name
FROM (
    SELECT
      province_name,
      SUM(gender = 'M') AS n_male,
      SUM(gender = 'F') AS n_female
    FROM patients pa
      JOIN province_names pr ON pa.province_id = pr.province_id
    GROUP BY province_name
  )
WHERE n_male > n_female

SELECT pr.province_name
FROM patients AS pa
  JOIN province_names AS pr ON pa.province_id = pr.province_id
GROUP BY pr.province_name
HAVING
  SUM(gender = 'M') > SUM(gender = 'F');

SELECT province_name
FROM patients p
  JOIN province_names r ON p.province_id = r.province_id
GROUP BY province_name
HAVING
  SUM(CASE WHEN gender = 'M' THEN 1 ELSE -1 END) > 0

SELECT pr.province_name
FROM patients AS pa
  JOIN province_names AS pr ON pa.province_id = pr.province_id
GROUP BY pr.province_name
HAVING
  COUNT( CASE WHEN gender = 'M' THEN 1 END) > COUNT(*) * 0.5;

Q) Each admission costs $50 for patients without insurance, and $10 for patients with insurance. All patients with an even patient_id have insurance.

Give each patient a 'Yes' if they have insurance, and a 'No' if they don't have insurance. Add up the admission_total cost for each has_insurance group.

SELECT 
CASE 
	WHEN patient_id % 2 = 0 THen 'Yes'
    ELSE 'No'
END AS has_insurance,
SUM(CASE 
	WHEN patient_id % 2 = 0 THen 10
    ELSE 50
END) AS cost_after_insurance
FROM admissions
group by has_insurance

Q) For each day display the total amount of admissions on that day. Display the amount changed from the previous date.

SELECT
 admission_date,
 count(admission_date) as admission_day,
 count(admission_date) - LAG(count(admission_date)) OVER(ORDER BY admission_date) AS admission_count_change 
FROM admissions
 group by admission_date

WITH admission_counts_table AS (
  SELECT admission_date, COUNT(patient_id) AS admission_count
  FROM admissions
  GROUP BY admission_date
  ORDER BY admission_date DESC
)
select
  admission_date, 
  admission_count, 
  admission_count - LAG(admission_count) OVER(ORDER BY admission_date) AS admission_count_change 
from admission_counts_table

Q) Sort the province names in ascending order in such a way that the province 'Ontario' is always on top.

select province_name
from province_names
order by
  (case when province_name = 'Ontario' then 0 else 1 end),
  province_name

select province_name
from province_names
order by
  (not province_name = 'Ontario'),
  province_name